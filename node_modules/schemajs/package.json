{
  "_args": [
    [
      {
        "raw": "schemajs@git://github.com/plus3network/schemajs.git",
        "scope": null,
        "escapedName": "schemajs",
        "name": "schemajs",
        "rawSpec": "git://github.com/plus3network/schemajs.git",
        "spec": "git://github.com/plus3network/schemajs.git",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:plus3network/schemajs.git",
          "sshUrl": "git+ssh://git@github.com/plus3network/schemajs.git",
          "httpsUrl": "git+https://github.com/plus3network/schemajs.git",
          "gitUrl": "git://github.com/plus3network/schemajs.git",
          "shortcut": "github:plus3network/schemajs",
          "directUrl": "https://raw.githubusercontent.com/plus3network/schemajs/master/package.json"
        }
      },
      "C:\\Users\\Johns_000\\Documents\\Github\\cs307_Symposium\\node_modules\\hyena"
    ]
  ],
  "_from": "git://github.com/plus3network/schemajs.git",
  "_id": "schemajs@0.1.10",
  "_inCache": true,
  "_location": "/schemajs",
  "_phantomChildren": {},
  "_requested": {
    "raw": "schemajs@git://github.com/plus3network/schemajs.git",
    "scope": null,
    "escapedName": "schemajs",
    "name": "schemajs",
    "rawSpec": "git://github.com/plus3network/schemajs.git",
    "spec": "git://github.com/plus3network/schemajs.git",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:plus3network/schemajs.git",
      "sshUrl": "git+ssh://git@github.com/plus3network/schemajs.git",
      "httpsUrl": "git+https://github.com/plus3network/schemajs.git",
      "gitUrl": "git://github.com/plus3network/schemajs.git",
      "shortcut": "github:plus3network/schemajs",
      "directUrl": "https://raw.githubusercontent.com/plus3network/schemajs/master/package.json"
    }
  },
  "_requiredBy": [
    "/hyena"
  ],
  "_resolved": "git://github.com/plus3network/schemajs.git#327efb7510db6b6661ba82df6f076fa4d2d535fa",
  "_shasum": "5112b871e9e561e22570af8179bf032bdd8bfa98",
  "_shrinkwrap": null,
  "_spec": "schemajs@git://github.com/plus3network/schemajs.git",
  "_where": "C:\\Users\\Johns_000\\Documents\\Github\\cs307_Symposium\\node_modules\\hyena",
  "author": {
    "name": "eleith"
  },
  "bugs": {
    "url": "https://github.com/eleith/schemajs/issues"
  },
  "contributors": [
    {
      "name": "andychilton"
    }
  ],
  "dependencies": {
    "underscore": ">= 1.1.7"
  },
  "description": "validate objects (including http request params) against a schema. includes express middleware",
  "devDependencies": {
    "chai": ">= 1.0.3",
    "mocha": ">= 1.0.3"
  },
  "engine": [
    "node >= 0.4.8"
  ],
  "gitHead": "327efb7510db6b6661ba82df6f076fa4d2d535fa",
  "homepage": "https://github.com/eleith/schemajs#readme",
  "main": "schema",
  "name": "schemajs",
  "optionalDependencies": {},
  "readme": "#v0.1.10\r\n\r\n### schemajs [![Build Status](https://secure.travis-ci.org/eleith/schemajs.png)](http://travis-ci.org/eleith/schemajs)\r\n\r\nvalidate objects (including http request params) against a schema. includes express middleware.\r\n\r\n### Installing \r\n\r\n\tnpm install schemajs\r\n\r\n# FEATURES\r\n - validates schema for deep objects and arrays as well\r\n - schema is in JSON, making it portable\r\n - properties, types and filters are extensible\r\n\r\n# EXAMPLE USAGE - validate an object\r\n\r\n```javascript\r\nvar schema  = require(\"./path/to/schemajs\");\r\nvar model   = schema.create(\r\n{\r\n  name:\t   {type:\"string\", filters:\"trim\", properties:{max:255}, required:true},\r\n  email:   {type:\"email\", filters:\"trim\", required:true},\r\n  wins:    {type:\"int\", filters:[\"trim\", \"toInt\"], default:0},\r\n  average: {type:\"float\", filters:[\"trim\", \"toFloat\"], default:0}\r\n});\r\n\r\nvar form = model.validate({name:\" your name \", email:\" name@example.com \"});\r\n\r\n// form.valid  - boolean, true if object matches schema\r\n// form.data   - contains filtered version of the object {name:\"your name\", email:\"name@example.com\", wins:0, average:0}\r\n// form.errors - contains associative array of any errors found\r\n```\r\n\r\n# EXAMPLE USAGE - in expressjs, validate the request parameters\r\n```javascript\r\nvar schema  = require(\"./path/to/schemajs\");\r\nvar query   = schema.create(\r\n{\r\n  wins:    {type:\"int\", filters:\"toInt\"},\r\n  query:   {type:\"string\", filters:\"trim\", required:true, error:\"invalid query\"}\r\n});\r\n\r\napp.get(\"/users\", schema.middleware(query), function(req, res)\r\n{\r\n  // schema validation is attached to req.form\r\n  if(req.form.valid)\r\n  {\r\n    db_lookup({query:req.form.data.query, wins: req.form.data.wins});\r\n  }\r\n  else\r\n  {\r\n    next(new Error(\"invalid request\"));\r\n    //next(req.form.errors, 400);\r\n  }\r\n});\r\n```\r\n# API \r\n\r\n## schema.test(schema)\r\n\r\nquickly test an individual schema\r\n\r\n```javascript\r\nfield = schema.test(\"email@email.com\", {type:\"email\", trim:true, properties:{min:5}})\r\n```\r\n\r\n## schema.create(schema)\r\n\r\nschema for a simple object of one integer value\r\n\r\n```javascript\r\nschema =\r\n{\r\n         // [string] value for acceppted parameters of the object you want to test\r\n  \"wins\":\r\n  {\r\n    // [string (built in types) or function (custom types)] the type declaration for accepted values\r\n    \"type\": \"int\",\r\n      \r\n    // [string (built in filters) or function (custom filters) or array (mix and match!)] \r\n    // OPTIONAL, filters to process and optionally modify values\r\n    \"filters\": [\"trim\", \"toInt\", custom_filter],\r\n      \r\n    // [anything] \r\n    // OPTIONAL, the default value if none is supplied by the object\r\n    \"default\": 0,\r\n      \r\n    // [boolean] \r\n    // OPTIONAL, if true, this parameter must exist to validate\r\n    \"required\": true\r\n\r\n    // [boolean] \r\n    // OPTIONAL, if true, this parameter can be null, despite any other rules\r\n    \"allownull\": true\r\n \r\n    // [object] \r\n    // OPTIONAL, functions are custom property checks, else a built in property will be looked up\r\n    \"properties\": {max:100, min:0, special:custom_property}\r\n      \r\n    // [string, object] OPTIONAL, if there is an error, you can override the message that is returned\r\n    // use a string or the \"default\" key to use the default error message\r\n    // keys can be any property key that was used as well as \"filters\", \"required\", \"type\"\r\n    \"error\": {max: \"too many wins\", min: \"too few wins\", \"default\": \"something is wrong with your wins value\"}\r\n  }\r\n};\r\n```\r\n\r\nschema with embedded schemas for object and array types\r\n\r\n```javascript\r\nschema =\r\n{\r\n  \"user\":\r\n  {\r\n    \"type\":  \"object\",\r\n    \"schema\":\r\n    {\r\n      \"name\":  { type: \"string\", properties: { max: 255 }, required: true},\r\n      \"email\": { type: \"email\", error: \"email is not a valid email address\"}\r\n    }\r\n    \"error\": \"user needs an email and a name\"\r\n  },\r\n      \r\n  \"tags\":\r\n  {\r\n    \"type\":  \"array\",\r\n    \"schema\":\r\n    {\r\n      \"type\": \"string\"\r\n    }\r\n    \"properties\":  { max: 10, min: 3}\r\n    \"error\": { max: \"too many tags\", min: \"too few tags\" }\r\n  }\r\n};\r\n```\t\r\n\r\n## schema.types\r\n\t\r\nbuilt in types \r\n\r\n\t[string+, string (empty string allowed), alpha, alphanum, email, object, array, date, number, int, boolean, url, zipcode]\r\n\r\nto extend, add a function onto schema.types that accepts a value and returns a boolean if the type matches\r\n\r\ntest is run AFTER schema.filters are run\r\n\r\n```javascript\r\nschema.types.awesome = function(value)\r\n{\r\n  if(isAwesome(value))\r\n    return true;\r\n  else\r\n    return false;\r\n}\r\n```\r\n## schema.filters\r\n\t\r\nbuilt in filters:\r\n\r\n\t[toInt, toFloat, toString, toDate, toBoolean (converts on/off, true/false, 1/0, yes/no to bools), trim, lowercase, uppercase]\r\n\r\nto extend, add a function onto schema.filters that takes in a value and returns the updated value\r\n\r\nfilters are run BEFORE schema.test is run\r\n\r\n```javascript\r\nschema.filters.surround = function(value)\r\n{\r\n  if(value == needs_surrounding)\r\n    return \"----\" + value + \"----\";\r\n  else\r\n    return value;\r\n}\r\n```\r\n\r\n## schema.properties\r\n\r\nbuilt in properties\r\n\r\n\t[max, min, regex, in]\r\n\r\nto extend, add a function onto schema.properties that takes in a value and any additional arguments\r\n\r\nproperties are run AFTER test and filters\r\n\r\n```javascript\r\nschema.properties.unique = function(value)\r\n{\r\n  if(isArray(value) && allUnique(value))\r\n    return true;\r\n  else\r\n    return false;\r\n}\r\n\r\nschema.properties.notIn = function(value, badwords)\r\n{\r\n  if(badwords.indexOf(value) != -1)\r\n    return false;\r\n  else\r\n    return true;\r\n}\r\n```\r\n\r\n# ideas\r\n\r\n   - make it work in the browser for client side validation\r\n   - strict mode, dissallowing extra parameters from being passed in\r\n   - dependency property making one parameters existance depend on another\r\n   - more types (phone numbers, credit card, ip address)\r\n   - more filters (camelcase, encode/unencode)\r\n   - more properties\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/eleith/schemajs.git"
  },
  "scripts": {
    "test": "mocha -R spec test/*.js"
  },
  "version": "0.1.10"
}
